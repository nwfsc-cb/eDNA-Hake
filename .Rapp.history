example(stan_model, package = "rstan", run.dontrun = TRUE, verbose = TRUE)
rm ~/.R/Makevars
unlink("~/.R/Makevars")
unlink("~/.Renviron")
file.edit("~/.Renviron")
install.packages(c('Rcpp', 'RcppArmadillo'))
Rcpp::sourceCpp('./Documents/helloworld.cpp')
xcode-select --install
Rcpp::sourceCpp('./Documents/helloworld.cpp')
install.packages("RcppEigen",depend=T)
library(Rcpp)
library(rstan)
Rcpp::sourceCpp('./Documents/helloworld.cpp')
example(stan_model,run.dontrun = TRUE,verbose=TRUE)
library(rstan)
example(stan_model,run.dontrun = TRUE,verbose=TRUE)
hist(rgamma(1e6,5,2),breaks=100)
hist(rgamma(1e6,2.5,2),breaks=100)
hist(rgamma(1e6,5,1),breaks=100)
library(here)
# This is the main file for reading in data, calling cleaning scripts for each year, #  and then combining the results# This script is for reading in qPCR data, merging it with locations, and starting a set of plots.  # It will likely be called in a rMarkdown file later.rm(list=ls())#setwd('./Github/eDNA-Hake')# Librarieslibrary(tidyverse)library(marmap)library(ggplot2)library(rstan)library(lubridate)library(reshape2)library(gridExtra)library(raster)#library(rgdal)library(sp)library(brms)library(sdmTMB)library(loo)library(here)############################################################################# DECLARED SPECIES OF INTERESTSP <- "hake" # options: hake, lamprey, eulachon# Specify an inhibition limit for retaining samples.INHIBIT.LIMIT <- 0.5# load and run the acoustic data. this is needed to reference the offshore-ness of #setwd(script.dir)source(here('Scripts',"process acoustic data for qPCR 2019 on.R"),local=TRUE)# dat.acoustic and dat.acoustic.binned are the relevant data frames# Read in 2019 data, clean, add some indexes.source(here('Scripts',"process 2019 qPCR results.R"),local=TRUE)# Read in 2021 data, clean, add some indexes.source(here('Scripts',"process 2021 qPCR results.R"),local=TRUE)# relevant checks on dimension and names for matricesidentical(names(dat.samp.2019),names(dat.samp.2021))identical(names(dat.stand.2019),names(dat.stand.2021))identical(names(PCR.2019),names(PCR.2021))identical(names(dat.control.field.neg.2021),names(dat.control.field.neg.2019))identical(names(dat.control.2021),names(dat.control.2019))identical(names(dat.inhibit.2021),names(dat.inhibit.2019))##### Combine outputs into single data.frame frame across years.dat.samp <- rbind(dat.samp.2019,dat.samp.2021)dat.stand <- rbind(dat.stand.2019%>% mutate(year=2019),dat.stand.2021%>% mutate(year=2019))PCR <- rbind(PCR.2019 %>% mutate(year=2019),PCR.2021 %>% mutate(year=2021))dat.control.field.neg <- rbind(dat.control.field.neg.2019,dat.control.field.neg.2021 )dat.control <- rbind(dat.control.2019,dat.control.2021 )dat.inhibit <- rbind(dat.inhibit.2019 %>% mutate(year=2019), dat.inhibit.2021 %>% mutate(year=2021) )################################################################### Call raw data plotting scripts.source(here('Scripts',"plot_raw_observations.R"),local=T)##################################################################################################################################### Make design matrices needed for fitting TMB model# this includes:# ------ spatial meshes and design matrices# ------ fixed effect matrices# ------ smooth design matrices# ------ random effect matrices ################################################################### Call raw data plotting scripts.source(here('Scripts',"Make_matrices.R"),local=T)#####################################################################################################################################library(here)library(TMB)setwd("../src")tmb_data <- list(Y_i = Y_i, #
                 # Read in counters                 n_i = n_i,   # number of total observations                 n_f = n_f,  # number of factors per year for weight matrix L. (currently)                 n_d = n_d,   # number of distinct depths in model                 n_y = n_y,  # number of years in model                 n_s = n_s,  # number of knot locations (constant across )                 n_fy = n_fy, # number of factor-year combinations#
                 # Fixed and smoothes for the mean effect                 Xf =  Xf,                 Xs = SM$Xs,                 Zs = SM$Zs,                 n_smooth = n_smooth,                 has_smooths = as.integer(has_smooths),                 b_smooth_start = b_smooth_start,#
                 #. Indexes for observations                 year_idx = year_idx,                 depth_idx = depth_idx,#
                 # Weight Matrices and helpers                 b_L_smooth_start = b_L_smooth_start,                 Z_L = Z_L$Z_L, # [L]ist [O]f (basis function matrices) [Matrices]                 X_L = X_L$X_L, # smoother linear effect matrix#
                 #factor indexes for weight matrix                  F_L_idx = F_L_idx, #  // integer index for years (of length n_fy)                 Y_L_idx = Y_L_idx,  #// integer index for years (of length n_fy)                 FY_start_idx = FY_start_idx, # // integer index for years (of length n_fy)#
                 # Spatial smoothers                 A_st =A_st, # projection from knot locations to observationss                 A_spatial_index = spde$sdm_spatial_id - 1L,                 spde = spde,                 A_ID_idx = A_ID_idx #station ID to match up observation and A_st output)tmb_params <- list(# Regression terms  betaf=rnorm(ncol_beta,0,0.1),   # smooth terms  bs=rep(0,n_bs),  b_smooth = b_smooth,  ln_smooth_sigma = rep(0,n_smooth),#
  # Weight terms  bs_L = rep(0,n_y),  b_L_smooth = rep(0,n_fy),  ln_L_smooth_sigma = rep(0,n_f),  # SPDE terms  ln_kappa = rep(0,n_f),  # Latent field  omega_s = matrix(0,n_s,n_fy),  # observation variance terms.  lnSigma=0)#
tmb_random <- c("bs","b_smooth")
rm(list=ls())setwd('./Github/eDNA-Hake')# Librarieslibrary(tidyverse)library(marmap)library(ggplot2)library(rstan)library(lubridate)library(reshape2)library(gridExtra)library(raster)#library(rgdal)library(sp)library(brms)library(sdmTMB)library(loo)library(here)############################################################################# DECLARED SPECIES OF INTERESTSP <- "hake" # options: hake, lamprey, eulachon# Specify an inhibition limit for retaining samples.INHIBIT.LIMIT <- 0.5# load and run the acoustic data. this is needed to reference the offshore-ness of #setwd(script.dir)source(here('Scripts',"process acoustic data for qPCR 2019 on.R"),local=TRUE)# dat.acoustic and dat.acoustic.binned are the relevant data frames# Read in 2019 data, clean, add some indexes.source(here('Scripts',"process 2019 qPCR results.R"),local=TRUE)# Read in 2021 data, clean, add some indexes.source(here('Scripts',"process 2021 qPCR results.R"),local=TRUE)# relevant checks on dimension and names for matricesidentical(names(dat.samp.2019),names(dat.samp.2021))identical(names(dat.stand.2019),names(dat.stand.2021))identical(names(PCR.2019),names(PCR.2021))identical(names(dat.control.field.neg.2021),names(dat.control.field.neg.2019))identical(names(dat.control.2021),names(dat.control.2019))identical(names(dat.inhibit.2021),names(dat.inhibit.2019))##### Combine outputs into single data.frame frame across years.dat.samp <- rbind(dat.samp.2019,dat.samp.2021)dat.stand <- rbind(dat.stand.2019%>% mutate(year=2019),dat.stand.2021%>% mutate(year=2019))PCR <- rbind(PCR.2019 %>% mutate(year=2019),PCR.2021 %>% mutate(year=2021))dat.control.field.neg <- rbind(dat.control.field.neg.2019,dat.control.field.neg.2021 )dat.control <- rbind(dat.control.2019,dat.control.2021 )dat.inhibit <- rbind(dat.inhibit.2019 %>% mutate(year=2019), dat.inhibit.2021 %>% mutate(year=2021) )################################################################### Call raw data plotting scripts.source(here('Scripts',"plot_raw_observations.R"),local=T)##################################################################################################################################### Make design matrices needed for fitting TMB model# this includes:# ------ spatial meshes and design matrices# ------ fixed effect matrices# ------ smooth design matrices# ------ random effect matrices ################################################################### Call raw data plotting scripts.source(here('Scripts',"Make_matrices.R"),local=T)#####################################################################################################################################library(here)library(TMB)setwd("../src")tmb_data <- list(Y_i = Y_i, #
                 # Read in counters                 n_i = n_i,   # number of total observations                 n_f = n_f,  # number of factors per year for weight matrix L. (currently)                 n_d = n_d,   # number of distinct depths in model                 n_y = n_y,  # number of years in model                 n_s = n_s,  # number of knot locations (constant across )                 n_fy = n_fy, # number of factor-year combinations#
                 # Fixed and smoothes for the mean effect                 Xf =  Xf,                 Xs = SM$Xs,                 Zs = SM$Zs,                 n_smooth = n_smooth,                 has_smooths = as.integer(has_smooths),                 b_smooth_start = b_smooth_start,#
                 #. Indexes for observations                 year_idx = year_idx,                 depth_idx = depth_idx,#
                 # Weight Matrices and helpers                 b_L_smooth_start = b_L_smooth_start,                 Z_L = Z_L$Z_L, # [L]ist [O]f (basis function matrices) [Matrices]                 X_L = X_L$X_L, # smoother linear effect matrix#
                 #factor indexes for weight matrix                  F_L_idx = F_L_idx, #  // integer index for years (of length n_fy)                 Y_L_idx = Y_L_idx,  #// integer index for years (of length n_fy)                 FY_start_idx = FY_start_idx, # // integer index for years (of length n_fy)#
                 # Spatial smoothers                 A_st =A_st, # projection from knot locations to observationss                 A_spatial_index = spde$sdm_spatial_id - 1L,                 spde = spde,                 A_ID_idx = A_ID_idx #station ID to match up observation and A_st output)tmb_params <- list(# Regression terms  betaf=rnorm(ncol_beta,0,0.1),   # smooth terms  bs=rep(0,n_bs),  b_smooth = b_smooth,  ln_smooth_sigma = rep(0,n_smooth),#
  # Weight terms  bs_L = rep(0,n_y),  b_L_smooth = rep(0,n_fy),  ln_L_smooth_sigma = rep(0,n_f),  # SPDE terms  ln_kappa = rep(0,n_f),  # Latent field  omega_s = matrix(0,n_s,n_fy),  # observation variance terms.  lnSigma=0)#
tmb_random <- c("bs","b_smooth")
